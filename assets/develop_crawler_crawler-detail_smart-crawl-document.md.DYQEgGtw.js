import{_ as a,c as o,o as r,a3 as t}from"./chunks/framework.w8luOYmq.js";const h=JSON.parse('{"title":"详解 smart-crawl 脚本","description":"","frontmatter":{},"headers":[],"relativePath":"develop/crawler/crawler-detail/smart-crawl-document.md","filePath":"develop/crawler/crawler-detail/smart-crawl-document.md","lastUpdated":1761663410000}'),d={name:"develop/crawler/crawler-detail/smart-crawl-document.md"};function l(i,e,c,n,s,p){return r(),o("div",null,e[0]||(e[0]=[t('<h1 id="详解-smart-crawl-脚本" tabindex="-1">详解 smart-crawl 脚本 <a class="header-anchor" href="#详解-smart-crawl-脚本" aria-label="Permalink to &quot;详解 smart-crawl 脚本&quot;">​</a></h1><h2 id="命令行启动参数文档" tabindex="-1">命令行启动参数文档 <a class="header-anchor" href="#命令行启动参数文档" aria-label="Permalink to &quot;命令行启动参数文档&quot;">​</a></h2><p>具体入参请参考:</p><ul><li><a href="https://github.com/Xpectuer/LibianCrawlers/blob/main/libiancrawlers/crawlers/smart_crawl/smart_crawl.py" target="_blank" rel="noreferrer">https://github.com/Xpectuer/LibianCrawlers/blob/main/libiancrawlers/crawlers/smart_crawl/smart_crawl.py</a></li></ul><h3 id="必填选项" tabindex="-1">必填选项 <a class="header-anchor" href="#必填选项" aria-label="Permalink to &quot;必填选项&quot;">​</a></h3><h4 id="url" tabindex="-1">url <a class="header-anchor" href="#url" aria-label="Permalink to &quot;url&quot;">​</a></h4><p><code>--url</code> 初次打开的页面。</p><h4 id="locale" tabindex="-1">locale <a class="header-anchor" href="#locale" aria-label="Permalink to &quot;locale&quot;">​</a></h4><p><code>--locale</code> 指定浏览器语言环境，比如 <code>&quot;zh-CN&quot;</code> 或 <code>&quot;en-US&quot;</code>。</p><p>也可以设为 <code>&quot;proxy&quot;</code> 以根据代理自动选择。</p><h3 id="常用选项" tabindex="-1">常用选项 <a class="header-anchor" href="#常用选项" aria-label="Permalink to &quot;常用选项&quot;">​</a></h3><h4 id="help" tabindex="-1">help <a class="header-anchor" href="#help" aria-label="Permalink to &quot;help&quot;">​</a></h4><p><code>--help</code> 可以展示帮助。</p><h4 id="mode" tabindex="-1">mode <a class="header-anchor" href="#mode" aria-label="Permalink to &quot;mode&quot;">​</a></h4><p><code>--mode</code> 可以设置输出模式。</p><p>缺省值是 <code>&#39;save_file&#39;</code> 即保存到本地文件。</p><p><code>&#39;insert_to_db&#39;</code> 表示写入远程数据仓库。</p><p>常用 <code>&#39;all&#39;</code> 或 <code>&#39;save_file_and_insert_to_db&#39;</code> 表示既保存到本地文件又写入远程数据仓库。</p><h4 id="debug" tabindex="-1">debug <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;debug&quot;">​</a></h4><p><code>--debug</code> 可以在 发生异常时 或 &quot;debug&quot; 指令时暂停。</p><h4 id="browser-data-dir-id" tabindex="-1">browser_data_dir_id <a class="header-anchor" href="#browser-data-dir-id" aria-label="Permalink to &quot;browser_data_dir_id&quot;">​</a></h4><p><code>--browser_data_dir_id</code> 用于指定不同的浏览器数据目录。</p><p>即控制 Camoufox 的 <code>launch_options[&#39;user_data_dir&#39;]</code> 和 <a href="https://camoufox.com/python/usage/#persistent_context" target="_blank" rel="noreferrer">persistent_context</a> 选项。</p><p>可以传入 <code>&quot;nil&quot;</code> 代表不传入，这会使 Camoufox 不使用 persistent_context 选项，即不使用浏览器环境存储。</p><p>如果未指定，则使用默认值 <code>&quot;smart-crawl-v1-default-browser-data-dir-id&quot;</code>。</p><p>因此，同一时间只能启动一个数据目录相同的 Camoufox 。 如果同时启动两个 browser_data_dir_id 相同的（都不填即默认值相同也算） smart-crawl 脚本，则后启动的会报错结束。</p><h4 id="steps" tabindex="-1">steps <a class="header-anchor" href="#steps" aria-label="Permalink to &quot;steps&quot;">​</a></h4><p><code>--steps</code> 指定脚本文件。</p><div class="info custom-block"><p class="custom-block-title">传入值规范</p><p>TODO: 此文档尚待编写...</p><p>其传入值的格式丰富多样。不过我懒得写了。</p><p>具体逻辑参考 <a href="https://github.com/Xpectuer/LibianCrawlers/blob/main/libiancrawlers/app_util/cmdarg_util.py" target="_blank" rel="noreferrer">libiancrawlers/app_util/cmdarg_util.py</a> 的 <code>parse_json_or_read_file_json_like</code> 函数。</p></div><div class="info custom-block"><p class="custom-block-title">所指定的脚本文件的规范</p><p>脚本文件规范参考 <a href="./steps.html">steps.md</a></p></div><h4 id="wait-until-close-browser" tabindex="-1">wait_until_close_browser <a class="header-anchor" href="#wait-until-close-browser" aria-label="Permalink to &quot;wait_until_close_browser&quot;">​</a></h4><p><code>--wait_until_close_browser</code> 可以在 因脚本完成或发生异常时而停止时 ，等待手动关闭浏览器后才退出进程。</p><blockquote><p>你也可以用 <code>--debug</code> 替代（但 <code>--debug</code> 功能更杂）。</p></blockquote><h4 id="浏览器-screen-限制" tabindex="-1">浏览器 screen 限制 <a class="header-anchor" href="#浏览器-screen-限制" aria-label="Permalink to &quot;浏览器 screen 限制&quot;">​</a></h4><p>可以用于限制 Camoufox 浏览器视口随机指纹的最大最小范围。</p><ul><li><code>--screen_max_height</code></li><li><code>--screen_max_width</code></li><li><code>--screen_min_height</code></li><li><code>--screen_min_width</code></li></ul><h4 id="html2markdown-soup-find" tabindex="-1">html2markdown_soup_find <a class="header-anchor" href="#html2markdown-soup-find" aria-label="Permalink to &quot;html2markdown_soup_find&quot;">​</a></h4><p><code>--html2markdown_soup_find</code> 用于指定会把匹配的元素转为 markdown 并塞到爬取的数据中。</p><p>其会使用 <code>BeautifulSoup.select_one()</code> 来在 html 中选择元素。</p><p>可以使用逗号分隔以传入多个值，将会使用第一个找到的值。</p><p>适用场景：这通常 <strong>很适合h5语义化做的很好的网站</strong> 。因为 h5 直接转 markdown 就可以在省下数据清洗时的负担。</p><h3 id="非常用选项" tabindex="-1">非常用选项 <a class="header-anchor" href="#非常用选项" aria-label="Permalink to &quot;非常用选项&quot;">​</a></h3><h4 id="output-dir" tabindex="-1">output_dir <a class="header-anchor" href="#output-dir" aria-label="Permalink to &quot;output_dir&quot;">​</a></h4><p><code>--output_dir</code> 输出目录，默认为 <code>os.path.join(&#39;.data&#39;, &#39;smart-crawl-v1&#39;)</code></p><h4 id="具体输出-tag" tabindex="-1">具体输出 tag <a class="header-anchor" href="#具体输出-tag" aria-label="Permalink to &quot;具体输出 tag&quot;">​</a></h4><p><code>--tag_group</code> 和 <code>--tag_version</code> 是用于分类的选项。</p><p>会影响:</p><ul><li>输出目录下的具体输出的文件夹。</li><li>输出对象的 json 字段中也会带有 <code>crawler_tag</code> 信息。</li></ul><p>这里面逻辑复杂，建议阅读源码。一般无需更改。</p><h4 id="save-file-json-indent" tabindex="-1">save_file_json_indent <a class="header-anchor" href="#save-file-json-indent" aria-label="Permalink to &quot;save_file_json_indent&quot;">​</a></h4><p><code>--save_file_json_indent</code> 保存到文件时的 json indent 。默认值为 <code>2</code></p><h4 id="dump-page-ignore-names" tabindex="-1">dump_page_ignore_names <a class="header-anchor" href="#dump-page-ignore-names" aria-label="Permalink to &quot;dump_page_ignore_names&quot;">​</a></h4><p><code>--dump_page_ignore_names</code> 用于忽略该名称的 html element。</p><p>例如传入 <code>--dump_page_ignore_names=script,svg</code> 可令 dump_page 忽略 script 和 svg 标签及子标签。</p><h4 id="addons-root-dir" tabindex="-1">addons_root_dir <a class="header-anchor" href="#addons-root-dir" aria-label="Permalink to &quot;addons_root_dir&quot;">​</a></h4><p><code>--addons_root_dir</code> 是 启用的浏览器扩展 的查找目录。</p><p>查找的逻辑是根据是否存在 <code>manifest.json</code> 来判断是否是插件目录。</p><h4 id="play-sound-when-gui-confirm" tabindex="-1">play_sound_when_gui_confirm <a class="header-anchor" href="#play-sound-when-gui-confirm" aria-label="Permalink to &quot;play_sound_when_gui_confirm&quot;">​</a></h4><p>:::TODO 尚未实现 此功能尚待开发... :::</p><p><code>--play_sound_when_gui_confirm</code> 意图是在 gui_confirm 步骤时发出提示音乐。</p><p>通常用于在需要人工过验证码时催促程序员。</p>',61)]))}const _=a(d,[["render",l]]);export{h as __pageData,_ as default};
