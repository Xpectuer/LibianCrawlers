import{_ as a,c as s,o as i,ag as t}from"./chunks/framework.B3HI_LuJ.js";const k=JSON.parse('{"title":"3-启动代码生成","description":"","frontmatter":{},"headers":[],"relativePath":"develop/data_cleaner_ci/start-code-gen.md","filePath":"develop/data_cleaner_ci/start-code-gen.md","lastUpdated":1745501308000}'),l={name:"develop/data_cleaner_ci/start-code-gen.md"};function n(d,e,p,o,c,r){return i(),s("div",null,e[0]||(e[0]=[t('<h1 id="_3-启动代码生成" tabindex="-1">3-启动代码生成 <a class="header-anchor" href="#_3-启动代码生成" aria-label="Permalink to &quot;3-启动代码生成&quot;">​</a></h1><blockquote><p>代码生成脚本将会为你执行以下操作:</p><ol><li><p>将创建 <code>./data_cleaner_ci_generated/</code> 目录和 <code>./user_code/</code> 符号链接目录。这两个目录已被 <code>.gitignore</code> 排除，不会被代码管理。</p></li><li><p>将在 <code>./data_cleaner_ci_generated/</code> 目录中执行以下操作：</p><ul><li><p>生成配置文件并保存到 <strong>用户家目录</strong> 的配置中，然后将配置文件 <strong>符号链接</strong> 至 <code>./data_cleaner_ci_generated/config.json</code>，以便进行 TypeScript 类型检查。</p></li><li><p>根据配置文件内容，在 <code>./data_cleaner_ci_generated</code> 目录下生成数仓中的数据类型和接口 API。</p></li></ul></li><li><p>将创建私人代码目录 <code>$HOME/.libian/crawler/data_cleaner_ci/user_code</code> 并将其 <strong>符号链接</strong> 至 <code>./user_code/</code>。</p><ul><li><p>以便进行 TypeScript 类型检查。</p></li><li><p>其他公共脚本需要从 <code>./user_code/</code> 目录中导入类型，以免私人代码中的类型名称直接被公共代码使用。</p></li></ul></li></ol></blockquote><p>在设置好数据仓库后，执行以下命令以生成数仓的 API 代码:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deno</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> task</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init:code_gen</span></span></code></pre></div><p>完成后，初始化工作就已经完成。然而，如果您需要适配并运行 <code>general_data_process</code> 目录下的公用脚本，您需要手动处理 TypeScript 类型导入。</p><p>您可以通过运行以下命令检查生成后的文件和公用脚本的类型适配情况：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deno</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> check</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> **</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.ts</span></span></code></pre></div><p>您可以运行一下测试，看看一切是否正常:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deno</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div>',9)]))}const g=a(l,[["render",n]]);export{k as __pageData,g as default};
