import{_ as l,c,o,ag as i}from"./chunks/framework.B3HI_LuJ.js";const u=JSON.parse('{"title":"项目功能模块化设计与路线图","description":"","frontmatter":{},"headers":[],"relativePath":"develop/roadmap.md","filePath":"develop/roadmap.md","lastUpdated":1743241315000}'),a={name:"develop/roadmap.md"};function t(b,e,h,r,d,k){return o(),c("div",null,e[0]||(e[0]=[i('<h1 id="项目功能模块化设计与路线图" tabindex="-1">项目功能模块化设计与路线图 <a class="header-anchor" href="#项目功能模块化设计与路线图" aria-label="Permalink to &quot;项目功能模块化设计与路线图&quot;">​</a></h1><p>以下是详细的项目功能及进度。</p><h2 id="核心功能模块" tabindex="-1">核心功能模块 <a class="header-anchor" href="#核心功能模块" aria-label="Permalink to &quot;核心功能模块&quot;">​</a></h2><ul><li>爬虫部分 <ul><li>使用 playwright + camoufox 实现浏览器自动化操作 <ul><li>通过指纹检查 <ul><li><input type="checkbox" id="checkbox0" checked="true"><label for="checkbox0">browser scan</label></li></ul></li><li>自动使用系统代理 <ul><li>在 Windows 上 <ul><li><input type="checkbox" id="checkbox1" checked="true"><label for="checkbox1">读取注册表 </label><code>Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings</code></li></ul></li></ul></li><li><input type="checkbox" id="checkbox2"><label for="checkbox2">优化 geoip , proxy-ip , locale , font 相互集成。</label><ul><li><input type="checkbox" id="checkbox3"><label for="checkbox3">修复 MacOS 上缺少默认中文字体问题（应当仅在 locale = zh-CN 时启用并提供随机字体列表）</label></li></ul></li><li>Dump WebPage <ul><li><input type="checkbox" id="checkbox4" checked="true"><label for="checkbox4">读取所有 frame 的 html tree</label></li><li><input type="checkbox" id="checkbox5" checked="true"><label for="checkbox5">调用截图功能</label><ul><li><input type="checkbox" id="checkbox6"><label for="checkbox6">修复 firefox(camoufox) </label><code>Cannot take screenshot larger than 32767</code> 错误。</li></ul></li><li>将图片或 pdf 上传到 MinIO，而不是保存 base64 。</li><li>寻找解决 firefox(camoufox) 无法打印网页为 pdf 的替代方案。</li></ul></li><li>Hook <ul><li><input type="checkbox" id="checkbox7"><label for="checkbox7">hook 所有 request / response</label></li><li><input type="checkbox" id="checkbox8"><label for="checkbox8">hook 所有 WebSocket</label></li><li><input type="checkbox" id="checkbox9"><label for="checkbox9">hook 所有页面创建</label></li><li><input type="checkbox" id="checkbox10"><label for="checkbox10">hook 所有路由变动</label></li><li><input type="checkbox" id="checkbox11"><label for="checkbox11">hook 所有 </label><code>JSON.parse()</code></li><li><input type="checkbox" id="checkbox12"><label for="checkbox12">hook 所有 </label><code>fetch()</code> 和返回值 <code>.json()</code></li></ul></li></ul></li><li>使用 deno + jsonata 清洗数据 <ul><li><input type="checkbox" id="checkbox13" checked="true"><label for="checkbox13">读取 postgres 中的数据并生成类型</label></li><li>优化生成的类型 <ul><li><input type="checkbox" id="checkbox14"><label for="checkbox14">更人性化的字符串模板常量</label></li></ul></li><li><input type="checkbox" id="checkbox15" checked="true"><label for="checkbox15">运行 </label><code>dev:jsonata</code> 命令监听 <code>data_cleaner_ci/jsonata_templates</code> 下的更新 并输出清洗结果至 <code>data_cleaner_ci/user_code</code>。</li></ul></li><li>清洗后的数据 <ul><li><input type="checkbox" id="checkbox16" checked="true"><label for="checkbox16">增量修改到 postgres</label></li><li><input type="checkbox" id="checkbox17" checked="true"><label for="checkbox17">自动运行 postgres 迁移</label></li><li><input type="checkbox" id="checkbox18" checked="true"><label for="checkbox18">用 typescript 确保 迁移对象 和 数据对象 的类型一致</label></li></ul></li></ul></li></ul>',4)]))}const x=l(a,[["render",t]]);export{u as __pageData,x as default};
