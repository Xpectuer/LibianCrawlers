import{_ as i,c as e,o as r,ag as o}from"./chunks/framework.B3HI_LuJ.js";const c=JSON.parse('{"title":"1-什么是 worker","description":"","frontmatter":{},"headers":[],"relativePath":"develop/worker/whats-worker.md","filePath":"develop/worker/whats-worker.md","lastUpdated":1747380310000}'),a={name:"develop/worker/whats-worker.md"};function t(u,l,p,s,_,n){return r(),e("div",null,l[0]||(l[0]=[o('<h1 id="_1-什么是-worker" tabindex="-1">1-什么是 worker <a class="header-anchor" href="#_1-什么是-worker" aria-label="Permalink to &quot;1-什么是 worker&quot;">​</a></h1><p>在经典语境下的 Worker 通常是指集群中的执行者 —— 与之相对的，还有一个中心化的控制台，这是大企业最喜欢的架构，但不适合群众使用:</p><ol><li>家用电脑就两三台，复杂的集群控制和容错无用武之地 —— 甚至集群控制不够细节，调度（分配、暂停）、性能优化（批次流式传输、双向事件传递）等细致的功能缺失。</li><li></li></ol><hr><p>为了在家庭环境中部署爬虫调度服务，需要解决以下问题：</p><ol><li>家中闲置的电脑，大部分时间别人不用，但有时别人要用。因此集群中的任务调度策略比较复杂: <ul><li>可能需要暂停、恢复、中止的进程管理。</li><li>可能需要 opencv 监控进程窗口，并在本机中处理 confirm 和模拟点击。</li><li>可能需要在某个节点下线时在另一个节点中启动任务，因此也需要提供恢复、去重策略。</li></ul></li><li>需要给朋友提供一个傻瓜式GUI。 <ul><li>尽量让机主也能在本地控制，这样机主也乐意部署。</li><li>内网之外的用户如果也想使用，那么该分配内网之内的哪些资源给他。</li></ul></li></ol><p>由于以上的去中心化的理想的需求，就导致市面上没有能满足要求的框架，因此不得不自己写一个 worker 。</p><p>从 UI 设计的角度来看，需要给用户展示的内容如下:</p><ol><li>节点列表 <ul><li>当前在线的节点 <ul><li>身份公钥</li><li>正在运行的任务</li></ul></li><li>当前离线的节点</li></ul></li><li>任务列表 <ul><li>创建新的任务 <ul><li>任务的类型和命令行参数</li><li>选取执行任务的节点</li></ul></li><li>已创建的任务 <ul><li>当前节点相关的运行的任务列表 <ul><li>任务状态</li><li>所有与此相关的节点 <ul><li>创建的节点</li><li>正在运行的节点</li></ul></li></ul></li></ul></li></ul></li></ol>',9)]))}const k=i(a,[["render",t]]);export{c as __pageData,k as default};
