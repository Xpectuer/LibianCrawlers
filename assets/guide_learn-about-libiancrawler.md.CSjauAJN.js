import{_ as r,c as i,o as e,ag as t}from"./chunks/framework.B3HI_LuJ.js";const p=JSON.parse('{"title":"1-了解 LibianCrawler","description":"","frontmatter":{},"headers":[],"relativePath":"guide/learn-about-libiancrawler.md","filePath":"guide/learn-about-libiancrawler.md","lastUpdated":1750597791000}'),l={name:"guide/learn-about-libiancrawler.md"};function n(o,a,s,_,c,d){return e(),i("div",null,a[0]||(a[0]=[t('<h1 id="_1-了解-libiancrawler" tabindex="-1">1-了解 LibianCrawler <a class="header-anchor" href="#_1-了解-libiancrawler" aria-label="Permalink to &quot;1-了解 LibianCrawler&quot;">​</a></h1><p>LibianCrawler 是一个模块化的数据处理框架，专为解决传统工具在 数据采集、数据清洗、数据存储、数据展示 和 数据计算 阶段中常见的工程问题而设计。通过整合一系列先进的技术和工具，LibianCrawler 能够高效地构建并输出高质量的数据集，同时支持与大语言模型（LLM）无缝对接，以实现各阶段脚本的自动化编写和优化。</p><p>传统工具在上述五个阶段中通常会遇到以下问题：</p><ul><li><strong>数据采集</strong>：抓取规则复杂、反反爬虫机制多样、分布式抓取效率低下。</li><li><strong>数据清洗</strong>：数据格式混乱、缺失值处理困难、清洗逻辑复杂且难以维护。</li><li><strong>数据存储</strong>：海量数据存储与管理效率低下，结构化与非结构化数据处理不统一。</li><li><strong>数据展示</strong>：数据可视化工具功能有限，无法满足多样化的展示需求。</li><li><strong>数据保护</strong>：配置文件 和 数据结构中敏感字段 会在业务代码的版本管理中泄漏; 运行时没有权限管理。</li><li><strong>数据计算</strong>：计算能力受限，难以高效处理大规模数据，且与 LLM 的集成支持不足。</li></ul><p>LibianCrawler 针对这些痛点，提供了全面的解决方案。接下来，我们将详细介绍其核心模块和功能。</p>',5)]))}const g=r(l,[["render",n]]);export{p as __pageData,g as default};
