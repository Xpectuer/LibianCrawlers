import{_ as a,c as t,o,ag as r}from"./chunks/framework.B3HI_LuJ.js";const c=JSON.parse('{"title":"节点身份系统设计","description":"","frontmatter":{},"headers":[],"relativePath":"develop/worker/identity-of-node.md","filePath":"develop/worker/identity-of-node.md","lastUpdated":1746785068000}'),i={name:"develop/worker/identity-of-node.md"};function l(d,e,n,p,s,h){return o(),t("div",null,e[0]||(e[0]=[r('<h1 id="节点身份系统设计" tabindex="-1">节点身份系统设计 <a class="header-anchor" href="#节点身份系统设计" aria-label="Permalink to &quot;节点身份系统设计&quot;">​</a></h1><p>在家用环境中，每个成员都想拥有更多的计算资源，每个成员都想给更多自己的朋友提供API服务。</p><p>但这种扩张不能继续下去，给朋友的朋友的计算资源的优先级将会降低（除非你使用自己的身份代为调用）。</p><h2 id="节点和身份的功能设计" tabindex="-1">节点和身份的功能设计 <a class="header-anchor" href="#节点和身份的功能设计" aria-label="Permalink to &quot;节点和身份的功能设计&quot;">​</a></h2><p>身份指存储于加密的本地文件中的公私钥密钥对。</p><p>节点指运行的worker服务，每个节点在启动时都需要一个机主身份。</p><p>节点可以提供运行任务，任务是创建者身份、参数、节点条件的三元组。</p><h3 id="任务发起流程" tabindex="-1">任务发起流程 <a class="header-anchor" href="#任务发起流程" aria-label="Permalink to &quot;任务发起流程&quot;">​</a></h3><p>在发起任务时，创建者使用公钥签发令牌1，发布给节点的节点列表中的所有满足节点条件的节点。</p><p>仅当三元组的值均满足某节点的条件时，该节点才会接受此任务，并在令牌1上签发令牌2，发送给创建任务的节点。</p><p>在收集完可接收任务的节点列表时，在令牌2上签发令牌3，再发送任务运行请求给这些节点中的一个或多个。</p><ul><li>这里会存在贪婪节点恶意浪费的问题，如果这个任务理应只需要一个节点完成。这些需要运行某个任务的节点们会发送广播包向其他节点询问是否有 hash 相同的任务被调用。如果有的话对方会回复自己的令牌3使该节点相信，并且这两个节点都会拒绝运行任务（禁止脚踏两条船，惩罚渣男）。</li><li>但是仅凭hash相同的策略并不能减少性能浪费——创建者依然可以创建多个参数近似（只有时间戳或某个无关紧要的参数有差异）的任务。因此，可以引入token机制来限制贪婪的节点的过多的请求。</li></ul><p>该节点在完成检查后如果将要运行任务，则会在令牌3上签发令牌4并发送给创建者，随后双方建立tls连接来传输事件流。</p><ul><li>连接中断指心跳包超时。维护心跳连接的正常对于任务的暂停、中止、提供去重key存储桶在多节点之间同步更新是非常重要的。</li><li>任务应当自行决定（或是决定要求创建者决定）当此连接中断时的执行策略。不应当无条件的无限执行下去。</li></ul>',14)]))}const f=a(i,[["render",l]]);export{c as __pageData,f as default};
