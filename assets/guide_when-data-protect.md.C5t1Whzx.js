import{_ as e,c as t,o as s,ag as n}from"./chunks/framework.B3HI_LuJ.js";const _=JSON.parse('{"title":"5-私有数据保护","description":"","frontmatter":{},"headers":[],"relativePath":"guide/when-data-protect.md","filePath":"guide/when-data-protect.md","lastUpdated":1750416732000}'),i={name:"guide/when-data-protect.md"};function p(c,a,o,d,l,r){return s(),t("div",null,a[0]||(a[0]=[n(`<h1 id="_5-私有数据保护" tabindex="-1">5-私有数据保护 <a class="header-anchor" href="#_5-私有数据保护" aria-label="Permalink to &quot;5-私有数据保护&quot;">​</a></h1><p>数据保护措施是为了保护以下内容不泄漏。</p><h2 id="数据采集和清洗时的个人信息" tabindex="-1">数据采集和清洗时的个人信息 <a class="header-anchor" href="#数据采集和清洗时的个人信息" aria-label="Permalink to &quot;数据采集和清洗时的个人信息&quot;">​</a></h2><p>在数据采集 <strong>之前的配置、之后的原始数据</strong> 中会带有私人信息，这些信息同样会存在于数据清洗的类型生成结果中。</p><p>因此，<code>deno task init:config</code> 命令和 <code>deno task init:code_gen</code> 命令的输出目录 <code>data_cleaner_ci_generated</code> 会被 gitignore 排除。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-uOFaE" id="tab-uiycYq0" checked><label data-title="data_cleaner_ci/.gitignore" for="tab-uiycYq0">data_cleaner_ci/.gitignore</label><input type="radio" name="group-uOFaE" id="tab-eQHN_jk"><label data-title=".gitignore" for="tab-eQHN_jk">.gitignore</label></div><div class="blocks"><div class="language-txt vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>data_cleaner_ci_generated/</span></span>
<span class="line"><span>user_code</span></span></code></pre></div><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span># vitepress</span></span>
<span class="line"><span>**/*.-timestamp-*.*s</span></span>
<span class="line"><span>docs/.vitepress/dist</span></span>
<span class="line"><span>docs/.vitepress/cache</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/.data</span></span>
<span class="line"><span># ...</span></span></code></pre></div></div></div><h2 id="数据清洗时的个人代码" tabindex="-1">数据清洗时的个人代码 <a class="header-anchor" href="#数据清洗时的个人代码" aria-label="Permalink to &quot;数据清洗时的个人代码&quot;">​</a></h2><p><code>deno task init:config</code> 命令的作用是 <a href="./../develop/data_cleaner_ci/init-config.html">初始化配置文件</a> 和创建 <code>data_cleaner_ci/user_code</code> 目录符号链接。</p><div class="tip custom-block"><p class="custom-block-title">为什么要在家目录下存放个人代码并符号链接到工程目录</p><p>对每个使用该框架的程序员而言，获取数据集的方式都是不同的、且不应当被公开的。</p><p>而可以被公开的部分（如爬取方式、清洗方式）则需要被这“中间的黑盒”连接。</p><p>因此 <code>user_code</code> 符号链接目录指向用户通用的目录，并在工程目录下可供编辑器和脚本类型检查和提供类型推断:</p><ul><li>公开代码需要通过 <strong>约定俗成</strong> 的类型别名或函数名来调用这个黑盒</li><li>而黑盒的具体实现则由程序员个人环境决定</li></ul></div>`,9)]))}const g=e(i,[["render",p]]);export{_ as __pageData,g as default};
