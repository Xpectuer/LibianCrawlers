{
  "tasks": {
    "init:config": {
      "description": "⭐ 初始化工程。在家目录下生成配置文件并符号链接到工程目录下",
      "command": "deno run --allow-sys=homedir --allow-read=data_cleaner_ci_generated,user_code init_config.ts"
    },
    "init:code_gen": {
      "description": "⭐ 启动代码生成(--help 查看帮助)",
      "command": "deno run --allow-env=\"PG*\",READABLE_STREAM,CI,\"TSC_*\",NODE_INSPECTOR_IPC,VSCODE_INSPECTOR_OPTIONS,NODE_ENV,NODE_NDEBUG --allow-read=code_gen_help.txt,data_cleaner_ci_generated,jsonata_templates,user_code/.tmp,workers,util.ts,general_data_process,quicktypeutil.ts,serialize-anything --allow-run=deno,../.venv/Scripts/python --allow-write=user_code,data_cleaner_ci_generated --v8-flags=--max-old-space-size=5120 code_gen.ts"
    },
    "init:code_gen:allownet": {
      "description": "启动代码生成(允许网络)(--help 查看帮助)",
      "command": "deno run --allow-env=\"PG*\",READABLE_STREAM,CI,\"TSC_*\",NODE_INSPECTOR_IPC,VSCODE_INSPECTOR_OPTIONS,NODE_ENV,NODE_NDEBUG --allow-read=code_gen_help.txt,data_cleaner_ci_generated,jsonata_templates,user_code/.tmp,workers,util.ts,general_data_process,quicktypeutil.ts,serialize-anything --allow-run=deno,../.venv/Scripts/python --allow-write=user_code,data_cleaner_ci_generated --v8-flags=--max-old-space-size=5120 --allow-net code_gen.ts"
    },
    "step:init:code_gen:allownet:cached": {
      "command": "deno task init:code_gen:allownet --skip-existed",
      "description": "启动代码生成(允许网络|启用缓存)",
      "dependencies": [
        "step:check"
      ]
    },
    "dev:jsonata": {
      "description": "⭐ 启动便于开发 jsonata 文件的一个小服务",
      "command": "deno run --allow-env --allow-read --allow-run start_dev_jsonata.ts"
    },
    "step:check:type:root": "deno check --frozen=true --doc --all \"*.ts\"",
    "step:check:type:general_data_process": "deno check --frozen=true --doc --all \"general_data_process/**/*.ts\"",
    "step:check:type:jsonata_templates": "deno check --frozen=true --doc --all \"jsonata_templates/**/*.ts\"",
    "step:check:type:serialize-anything": "deno check --frozen=true --doc --all \"serialize-anything/**/*.ts\"",
    "step:check:type:subproc": "deno check --frozen=true --doc --all \"subproc/**/*.ts\"",
    "step:check:type:user_code": "deno check --frozen=true --doc --all \"user_code/**/*.ts\"",
    "step:check:type:workers": "deno check --frozen=true --doc --all \"workers/**/*.ts\"",
    "step:check:type:data_cleaner_ci_generated:meta": "deno check --frozen=true --doc --all \"data_cleaner_ci_generated/**/meta.ts\"",
    "step:check:type:data_cleaner_ci_generated:index": {
      "description": "Ignore it because OOM",
      "command": "deno check --frozen=true --doc-only \"data_cleaner_ci_generated/**/index.ts\""
    },
    "step:check:type:data_cleaner_ci_generated:api": {
      "description": "Ignore it because OOM",
      "command": "deno check --frozen=true --doc-only \"data_cleaner_ci_generated/**/api.ts\""
    },
    "step:check:type:data_cleaner_ci_generated": {
      "dependencies": [
        "step:check:type:data_cleaner_ci_generated:meta",
        "step:check:type:data_cleaner_ci_generated:index",
        "step:check:type:data_cleaner_ci_generated:api"
      ]
    },
    "step:check:type": {
      "description": "检查类型",
      "dependencies": [
        "step:check:type:root",
        "step:check:type:general_data_process",
        "step:check:type:jsonata_templates",
        "step:check:type:serialize-anything",
        "step:check:type:subproc",
        "step:check:type:user_code",
        "step:check:type:workers",
        "step:check:type:data_cleaner_ci_generated"
      ]
    },
    "step:check": {
      "description": "⭐ 检查类型并运行测试",
      "command": "deno test --allow-env=NODE_NDEBUG,READABLE_STREAM,OPENAI_ORG_ID,OPENAI_PROJECT_ID,OPENAI_WEBHOOK_SECRET,OPENAI_LOG --allow-read=user_code/testdevconfig.json,user_code/.tmp/.util_test --allow-write=user_code/.tmp/.util_test --allow-net --ignore=./jsonata_templates/jsonata_test.ts --quiet",
      "dependencies": [
        "step:check:type"
      ]
    },
    "step:libian_crawler:clean_and_merge:allownet": {
      "description": "⭐ 启动数据清洗(允许网络)(--help 查看帮助)",
      "command": "deno run --v8-flags=--max-old-space-size=10240 --allow-env=\"PG*\",NODE_NDEBUG,READABLE_STREAM --allow-read=data_cleaner_ci_generated/.cache_by_id,jsonata_templates,user_code/.tmp,workers,util.ts,general_data_process,data_cleaner_ci_generated/.libian_crawler_clean_and_merge_cache,serialize-anything --allow-run=deno,../.venv/Scripts/python --allow-write=data_cleaner_ci_generated,user_code,data_cleaner_ci_generated/.libian_crawler_clean_and_merge_cache --allow-net general_data_process/libian_crawler/clean_and_merge.ts"
    },
    "dev:libian_crawler:run_code_gen:no_check": {
      "command": "deno task init:code_gen:allownet --skip-existed"
    },
    "dev:libian_crawler:run_code_gen": {
      "description": "⭐ 一键启动类型生成(启用缓存和允许网络)",
      "command": "deno task step:check",
      "dependencies": [
        "dev:libian_crawler:run_code_gen:no_check"
      ]
    },
    "dev:libian_crawler:run_clean": {
      "description": "⭐ 一键启动数据清洗(启用缓存和允许网络)",
      "command": "deno task step:check && deno task step:libian_crawler:clean_and_merge:allownet --use-cache"
    },
    "dev:libian_crawler:run_all": {
      "description": "⭐ 一键启动类型生成和数据清洗(都启用缓存和允许网络)",
      "command": "deno task dev:libian_crawler:run_clean",
      "dependencies": [
        "dev:libian_crawler:run_code_gen"
      ]
    },
    "init:code_gen:only_nocodb": {
      "description": "仅启动 nocodb 代码生成(允许网络)",
      "command": "deno task init:code_gen:allownet --only-gen-nocodb"
    },
    "init:nocodb": {
      "description": "⭐ 初始化 nocodb 数据分析",
      "command": "deno task step:check:type:data_cleaner_ci_generated:meta && deno task step:check:type:user_code",
      "dependencies": [
        "init:code_gen:only_nocodb"
      ]
    },
    "dev:libian_crawler:run_code_gen:update:no_check": {
      "command": "deno task init:code_gen:allownet"
    },
    "dev:libian_crawler:run_code_gen:update": {
      "description": "⭐ 一键启动类型生成(更新缓存和允许网络)",
      "command": "deno task step:check",
      "dependencies": [
        "dev:libian_crawler:run_code_gen:update:no_check"
      ]
    },
    "dev:libian_crawler:run_clean:update": {
      "description": "⭐ 一键启动数据清洗(更新缓存和允许网络)",
      "command": "deno task step:check && deno task step:libian_crawler:clean_and_merge:allownet --update-cache"
    },
    "dev:libian_crawler:run_all:update": {
      "description": "⭐ 一键启动类型生成和数据清洗(都更新缓存和允许网络)",
      "command": "deno task dev:libian_crawler:run_clean:update",
      "dependencies": [
        "dev:libian_crawler:run_code_gen:update"
      ]
    }
  },
  "imports": {
    "@b-fuze/deno-dom": "jsr:@b-fuze/deno-dom@^0.1.48",
    "@deno-library/progress": "jsr:@deno-library/progress@^1.5.1",
    "@std/assert": "jsr:@std/assert@^1.0.8",
    "@std/async": "jsr:@std/async@^1.0.10",
    "@std/cli": "jsr:@std/cli@^1.0.17",
    "@std/datetime": "jsr:@std/datetime@^0.225.3",
    "@streamparser/json": "npm:@streamparser/json@^0.0.22",
    "@streamparser/json-whatwg": "npm:@streamparser/json-whatwg@^0.0.22",
    "@types/async-lock": "npm:@types/async-lock@^1.4.2",
    "@types/big-json": "npm:@types/big-json@^3.2.5",
    "async-lock": "npm:async-lock@^1.4.1",
    "big-json": "npm:big-json@^3.2.0",
    "collection-utils": "npm:collection-utils@^1.0.1",
    "comlink": "npm:comlink@^4.4.2",
    "compress-json": "npm:compress-json@^3.2.0",
    "cross-env": "npm:cross-env@^7.0.3",
    "destr": "npm:destr@^2.0.5",
    "dns-socket": "npm:dns-socket@^4.2.2",
    "dns2": "npm:dns2@^2.1.0",
    "encoding": "npm:encoding@^0.1.13",
    "f-streams-async": "npm:f-streams-async@^3.4.4",
    "filesize": "npm:filesize@^10.1.6",
    "hi-base32": "npm:hi-base32@^0.5.1",
    "image-meta": "npm:image-meta@^0.2.1",
    "intl-number-parser": "npm:intl-number-parser@^1.0.5",
    "is-arguments": "npm:is-arguments@^1.2.0",
    "is-array-buffer": "npm:is-array-buffer@^3.0.5",
    "is-date-object": "npm:is-date-object@^1.1.0",
    "is-regex": "npm:is-regex@^1.2.1",
    "is-shared-array-buffer": "npm:is-shared-array-buffer@^1.0.4",
    "json-schema-to-ts": "npm:json-schema-to-ts@^3.1.1",
    "json-stream-stringify": "npm:json-stream-stringify@^3.1.6",
    "json5": "npm:json5@^2.2.3",
    "jsonata": "npm:jsonata@^2.0.6",
    "kysely": "npm:kysely@^0.27.5",
    "kysely-postgres-js": "npm:kysely-postgres-js@^2.0.0",
    "openai": "npm:openai@^5.8.2",
    "parse-chinese-number": "npm:parse-chinese-number@^1.0.5",
    "postgres": "npm:postgres@^3.4.5",
    "quicktype-core": "npm:quicktype-core@^23.0.170",
    "shx": "npm:shx@^0.4.0",
    "typescript": "npm:typescript@^5.7.3",
    "which-boxed-primitive": "npm:which-boxed-primitive@^1.1.1",
    "which-collection": "npm:which-collection@^1.0.2",
    "which-typed-array": "npm:which-typed-array@^1.1.18"
  },
  "nodeModulesDir": "auto",
  "unstable": [
    "temporal"
  ]
}
